/**
 * Expression API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Expression from './Expression';
import OperatorType from './OperatorType';

/**
 * The Operation model module.
 * @module model/Operation
 * @version 1.0.0
 */
class Operation {
    /**
     * Constructs a new <code>Operation</code>.
     * @alias module:model/Operation
     * @extends module:model/Expression
     * @implements module:model/Expression
     */
    constructor() { 
        Expression.initialize(this);
        Operation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Operation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Operation} obj Optional instance to populate.
     * @return {module:model/Operation} The populated <code>Operation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Operation();
            Expression.constructFromObject(data, obj);
            Expression.constructFromObject(data, obj);

            if (data.hasOwnProperty('left')) {
                obj['left'] = Expression.constructFromObject(data['left']);
            }
            if (data.hasOwnProperty('right')) {
                obj['right'] = Expression.constructFromObject(data['right']);
            }
            if (data.hasOwnProperty('operatorType')) {
                obj['operatorType'] = OperatorType.constructFromObject(data['operatorType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Operation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Operation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `left`
        if (data['left']) { // data not null
          Expression.validateJSON(data['left']);
        }
        // validate the optional field `right`
        if (data['right']) { // data not null
          Expression.validateJSON(data['right']);
        }

        return true;
    }


}



/**
 * @member {module:model/Expression} left
 */
Operation.prototype['left'] = undefined;

/**
 * @member {module:model/Expression} right
 */
Operation.prototype['right'] = undefined;

/**
 * @member {module:model/OperatorType} operatorType
 */
Operation.prototype['operatorType'] = undefined;


// Implement Expression interface:
/**
 * @member {String} @type
 */
Expression.prototype['@type'] = undefined;




export default Operation;

