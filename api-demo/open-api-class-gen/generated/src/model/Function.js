/**
 * Expression API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Expression from './Expression';
import FunctionType from './FunctionType';

/**
 * The Function model module.
 * @module model/Function
 * @version 1.0.0
 */
class Function {
    /**
     * Constructs a new <code>Function</code>.
     * @alias module:model/Function
     * @extends module:model/Expression
     * @implements module:model/Expression
     */
    constructor() { 
        Expression.initialize(this);
        Function.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Function</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Function} obj Optional instance to populate.
     * @return {module:model/Function} The populated <code>Function</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Function();
            Expression.constructFromObject(data, obj);
            Expression.constructFromObject(data, obj);

            if (data.hasOwnProperty('expressions')) {
                obj['expressions'] = ApiClient.convertToType(data['expressions'], [Expression]);
            }
            if (data.hasOwnProperty('functionType')) {
                obj['functionType'] = FunctionType.constructFromObject(data['functionType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Function</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Function</code>.
     */
    static validateJSON(data) {
        if (data['expressions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['expressions'])) {
                throw new Error("Expected the field `expressions` to be an array in the JSON data but got " + data['expressions']);
            }
            // validate the optional field `expressions` (array)
            for (const item of data['expressions']) {
                Expression.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Expression>} expressions
 */
Function.prototype['expressions'] = undefined;

/**
 * @member {module:model/FunctionType} functionType
 */
Function.prototype['functionType'] = undefined;


// Implement Expression interface:
/**
 * @member {String} @type
 */
Expression.prototype['@type'] = undefined;




export default Function;

