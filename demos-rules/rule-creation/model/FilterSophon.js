/**
 * Expression API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Expression from './Expression';
import SophonSide from './SophonSide';

/**
 * The FilterSophon model module.
 * @module model/FilterSophon
 * @version 1.0.0
 */
class FilterSophon {
    /**
     * Constructs a new <code>FilterSophon</code>.
     * @alias module:model/FilterSophon
     * @extends module:model/Expression
     * @implements module:model/Expression
     */
    constructor() { 
        Expression.initialize(this);
        FilterSophon.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FilterSophon</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FilterSophon} obj Optional instance to populate.
     * @return {module:model/FilterSophon} The populated <code>FilterSophon</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FilterSophon();
            Expression.constructFromObject(data, obj);
            Expression.constructFromObject(data, obj);

            if (data.hasOwnProperty('side')) {
                obj['side'] = SophonSide.constructFromObject(data['side']);
            }
            if (data.hasOwnProperty('flags')) {
                obj['flags'] = ApiClient.convertToType(data['flags'], ['String']);
            }
            if (data.hasOwnProperty('venues')) {
                obj['venues'] = ApiClient.convertToType(data['venues'], ['String']);
            }
            if (data.hasOwnProperty('entities')) {
                obj['entities'] = ApiClient.convertToType(data['entities'], ['String']);
            }
            if (data.hasOwnProperty('platforms')) {
                obj['platforms'] = ApiClient.convertToType(data['platforms'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FilterSophon</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FilterSophon</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['flags'])) {
            throw new Error("Expected the field `flags` to be an array in the JSON data but got " + data['flags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['venues'])) {
            throw new Error("Expected the field `venues` to be an array in the JSON data but got " + data['venues']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['entities'])) {
            throw new Error("Expected the field `entities` to be an array in the JSON data but got " + data['entities']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['platforms'])) {
            throw new Error("Expected the field `platforms` to be an array in the JSON data but got " + data['platforms']);
        }

        return true;
    }


}



/**
 * @member {module:model/SophonSide} side
 */
FilterSophon.prototype['side'] = undefined;

/**
 * @member {Array.<String>} flags
 */
FilterSophon.prototype['flags'] = undefined;

/**
 * @member {Array.<String>} venues
 */
FilterSophon.prototype['venues'] = undefined;

/**
 * @member {Array.<String>} entities
 */
FilterSophon.prototype['entities'] = undefined;

/**
 * @member {Array.<String>} platforms
 */
FilterSophon.prototype['platforms'] = undefined;


// Implement Expression interface:
/**
 * @member {String} @type
 */
Expression.prototype['@type'] = undefined;




export default FilterSophon;

